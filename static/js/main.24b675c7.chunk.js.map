{"version":3,"sources":["Name.js","WindowSize.js","Canvas.js","ColorPicker.js","RefreshButton.js","Paint.js","App.js","index.js"],"names":["React","memo","useState","name","setName","className","value","onChange","e","target","onClick","setSelectionRange","length","placeholder","useWindowSize","cb","window","innerWidth","innerHeight","windowWidth","windowHeight","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","Canvas","props","drawing","setDrawing","width","setWidth","height","setHeight","canvasRef","useRef","ctx","current","getContext","stopDrawing","closePath","ref","onMouseDown","lineJoin","lineCap","lineWidth","strokeStyle","color","beginPath","moveTo","clientX","offsetLeft","clientY","offsetTop","onMouseUp","onMouseOut","onMouseMove","coords","lineTo","stroke","handleMouseMove","ColorPicker","colors","activeColor","setActiveColor","map","i","key","type","checked","style","background","Paint","setColors","getColors","useCallback","baseColor","randomColor","slice","fetch","then","res","json","hex","visible","setVisible","timeoutId","clearTimeout","setTimeout","borderTop","Name","marginTop","RefreshButton","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.24b675c7.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport default React.memo(() => {\r\n  const [name, setName] = useState('')\r\n  return (\r\n    <label className=\"header-name\">\r\n      <input\r\n        value={name}\r\n        onChange={e => setName(e.target.value)}\r\n        onClick={e => e.target.setSelectionRange(0, e.target.value.length)}\r\n        placeholder=\"Untitled\"\r\n      />\r\n    </label>\r\n  )\r\n})\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nexport default function useWindowSize(cb) {\r\n  const [[windowWidth, windowHeight], setWindowSize] = useState([window.innerWidth, window.innerHeight])\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      cb()\r\n      setWindowSize([window.innerWidth, window.innerHeight])\r\n    }\r\n    window.addEventListener('resize', handleResize)\r\n    return () => window.removeEventListener('resize', handleResize)\r\n  }, [])\r\n  return [windowWidth, windowHeight]\r\n}\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport useWindowSize from './WindowSize'\r\n\r\nexport default function Canvas(props) {\r\n  const [drawing, setDrawing] = useState(false)\r\n  const [width, setWidth] = useState(window.innerWidth)\r\n  const [height, setHeight] = useState(window.innerHeight)\r\n\r\n  const canvasRef = useRef()\r\n  const ctx = useRef()\r\n\r\n  useEffect(() => {\r\n    ctx.current = canvasRef.current.getContext('2d')\r\n  }, [])\r\n\r\n  const [windowWidth, windowHeight] = useWindowSize(() => {\r\n    setWidth(window.innerWidth)\r\n    setHeight(window.innerHeight)\r\n  })\r\n\r\n  function handleMouseMove(e) {\r\n    // actual coordinates\r\n    const coords = [\r\n      e.clientX - canvasRef.current.offsetLeft,\r\n      e.clientY - canvasRef.current.offsetTop\r\n    ]\r\n    if (drawing) {\r\n      ctx.current.lineTo(...coords)\r\n      ctx.current.stroke()\r\n    }\r\n    if (props.handleMouseMove) {\r\n        props.handleMouseMove(...coords)\r\n    }\r\n  }\r\n  function startDrawing(e) {\r\n    ctx.current.lineJoin = 'round'\r\n    ctx.current.lineCap = 'round'\r\n    ctx.current.lineWidth = 10\r\n    ctx.current.strokeStyle = props.color\r\n    ctx.current.beginPath();\r\n    // actual coordinates\r\n    ctx.current.moveTo(\r\n      e.clientX - canvasRef.current.offsetLeft,\r\n      e.clientY - canvasRef.current.offsetTop\r\n    )\r\n    setDrawing(true)\r\n  }\r\n  function stopDrawing() {\r\n    ctx.current.closePath()\r\n    setDrawing(false)\r\n  }\r\n\r\n  return <canvas\r\n    ref={canvasRef}\r\n    width={props.width || width}\r\n    height={props.height || height}\r\n    onMouseDown={startDrawing}\r\n    onMouseUp={stopDrawing}\r\n    onMouseOut={stopDrawing}\r\n    onMouseMove={handleMouseMove}\r\n  />\r\n}\r\n\r\n// export default class Canvas extends React.Component {\r\n//   constructor(props) {\r\n//     super(props)\r\n//     this.canvasRef = React.createRef()\r\n//     this.handleMouseMove = this.handleMouseMove.bind(this)\r\n//     this.handleResize = this.handleResize.bind(this)\r\n//     this.startDrawing = this.startDrawing.bind(this)\r\n//     this.stopDrawing = this.stopDrawing.bind(this)\r\n//     this.state = {\r\n//       drawing: false,\r\n//       height: window.innerHeight,\r\n//       width: window.innerWidth\r\n//     }\r\n//   }\r\n//   componentDidMount() {\r\n//     this.ctx = this.canvasRef.current.getContext('2d')\r\n//     window.addEventListener('resize', this.handleResize);\r\n//   }\r\n//   componentWillUnmount() {\r\n//     window.removeEventListener('resize', this.handleResize)\r\n//   }\r\n//   handleMouseMove(e) {\r\n//     // actual coordinates\r\n//     const coords = [\r\n//       e.clientX - this.canvasRef.current.offsetLeft,\r\n//       e.clientY - this.canvasRef.current.offsetTop\r\n//     ]\r\n//     if (this.state.drawing) {\r\n//       this.ctx.lineTo(...coords)\r\n//       this.ctx.stroke()\r\n//     }\r\n//     if (this.props.handleMouseMove) {\r\n//         this.props.handleMouseMove(...coords)\r\n//     }\r\n//   }\r\n//   startDrawing(e) {\r\n//     this.ctx.lineJoin = 'round'\r\n//     this.ctx.lineCap = 'round'\r\n//     this.ctx.lineWidth = 10\r\n//     this.ctx.strokeStyle = this.props.color\r\n//     this.ctx.beginPath();\r\n//     // actual coordinates\r\n//     this.ctx.moveTo(\r\n//       e.clientX - this.canvasRef.current.offsetLeft,\r\n//       e.clientY - this.canvasRef.current.offsetTop\r\n//     )\r\n//     this.setState({ drawing: true })\r\n//   }\r\n//   stopDrawing() {\r\n//     this.ctx.closePath()\r\n//     this.setState({ drawing: false })\r\n//   }\r\n//   render() {\r\n//     return (\r\n//       <React.Fragment>\r\n//         <canvas\r\n//           ref={this.canvasRef}\r\n//           width={this.props.width || this.state.width}\r\n//           height={this.props.height || this.state.height}\r\n//           onMouseDown={this.startDrawing}\r\n//           onMouseUp={this.stopDrawing}\r\n//           onMouseOut={this.stopDrawing}\r\n//           onMouseMove={this.handleMouseMove}\r\n//         />\r\n//       </React.Fragment>\r\n//     )\r\n//   }\r\n// }\r\n","import React, { useState, useEffect } from 'react'\r\nimport randomColor from 'randomcolor'\r\n\r\nexport default function ColorPicker({ colors = [], activeColor, setActiveColor }) {\r\n  if (!colors.length) return null\r\n  return (\r\n    <fieldset className=\"color-picker\">\r\n      {colors.map((color, i) => (\r\n        <label key={i}>\r\n          <input\r\n            name=\"color\"\r\n            type=\"radio\"\r\n            value={color}\r\n            checked={activeColor === color}\r\n            onChange={() => setActiveColor(color)}\r\n          />\r\n          <span style={{ background: color }} />\r\n        </label>\r\n      ))}\r\n    </fieldset>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default React.memo(({ cb }) => {\r\n  return <button className=\"button-refresh-colors\" onClick={cb}>&#8634;</button>\r\n})\r\n","import React, { useState, useEffect, useCallback, useRef } from 'react'\r\nimport Name from './Name'\r\nimport Canvas from './Canvas'\r\nimport ColorPicker from './ColorPicker'\r\nimport RefreshButton from './RefreshButton'\r\nimport useWindowSize from './WindowSize'\r\nimport randomColor from 'randomcolor'\r\n\r\nexport default function Paint() {\r\n  const [colors, setColors] = useState([])\r\n  const [activeColor, setActiveColor] = useState(null)\r\n  const getColors = useCallback(() => {\r\n    const baseColor = randomColor().slice(1);\r\n    fetch(`https://www.thecolorapi.com/scheme?hex=${baseColor}&mode=monochrome`)\r\n    .then(res => res.json())\r\n    .then(res => {\r\n      setColors(res.colors.map(color => color.hex.value))\r\n      setActiveColor(res.colors[0].hex.value)\r\n    })\r\n  }, [])\r\n  useEffect(getColors, [])\r\n\r\n  const [visible, setVisible] = useState(false)\r\n  let timeoutId = useRef()\r\n  const [windowWidth, windowHeight] = useWindowSize(() => {\r\n    setVisible(true)\r\n    clearTimeout(timeoutId.current)\r\n    timeoutId.current = setTimeout(() => setVisible(false), 500)\r\n  })\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <header style={{ borderTop: `10px solid ${activeColor}` }}>\r\n        <div>\r\n          <Name />\r\n        </div>\r\n        <div style={{ marginTop: 10 }}>\r\n          <ColorPicker\r\n            colors={colors}\r\n            activeColor={activeColor}\r\n            setActiveColor={setActiveColor}\r\n          />\r\n          <RefreshButton cb={getColors} />\r\n        </div>\r\n      </header>\r\n      {activeColor && (\r\n        <Canvas\r\n          color={activeColor}\r\n          height={window.innerHeight}\r\n        />\r\n      )}\r\n      <div className={`window-size ${visible ? '' : 'hidden'}`}>\r\n        {windowWidth} x {windowHeight}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Paint from './Paint'\r\n\r\nexport default function App() {\r\n  return(\r\n    <div>\r\n      <center>\r\n        <h1> A simple paint app using React Hooks </h1>\r\n      </center>\r\n    <Paint />\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />,document.getElementById('root'))\r\n"],"sourceRoot":""}